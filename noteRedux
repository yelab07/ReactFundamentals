State Tree
One of the key points of Redux is that all of the data is stored in a single object called the state tree. But what does a state tree actually look like? Good question! Here's an example:
{
recipes: [
{ … },
{ … },
{ … }
],
ingredients: [
{ … },
{ … },
{ … },
{ … },
{ … },
{ … }
],
products: [
{ … },
{ … },
{ … },
{ … }
]
}
See how all of the data for this imaginary cooking site is stored in a single object? All of the state (or "application data") for this site is stored in one, single location. This is what we mean when we say "state tree": it's just all of the data stored in a single object.
Summary
In this lesson, we looked at the data in an application. We saw that in traditional apps, the data is mixed in with the UI and markup. This can lead to hard-to-find bugs where updating the state in one location doesn't update it in every location.

We learned that the main goal that Redux is trying to offer is predictable state management. The way that Redux tries to accomplish this is through having a single state tree. This state tree is an object that stores the entire state for an application. Now that all state is stored in one location, we discovered three ways to interact with it:

Getting the state
Listening for changes to the state
Updating the state
Then we combine the three items above and the state tree object itself into one unit which we called the store. We'll look at creating this store in the next lesson.
When an event takes place in a Redux application, we use a plain JavaScript object to keep track of what the specific event was. This object is called an Action.

Let's take another look at an Action:

{
type: "ADD_PRODUCT_TO_CART"
}
As you can see, an Action is clearly just a plain JavaScript object. What makes this plain JavaScript object special in Redux, is that every Action must have a type property. The purpose of the type property is to let our app (Redux) know exactly what event just took place. This Action tells us that a product was added to the cart. That's incredibly descriptive and quite helpful, isn't it?

Now, since an Action is just a regular object, we can include extra data about the event that took place:
{
type: "ADD_PRODUCT_TO_CART",
productId: 17
}
In this Action, we're including the productId field. Now we know exactly which product was added to the store!

One more note to keep in mind as you build your Action objects: it's better practice to pass as little data as possible in each action. For example, you should prefer passing the index or ID of a product rather than the entire product object itself.

Action Creators are functions that create/return action objects. For example:

const addItem = (item) => ({
type: ADD_ITEM,
item,
});
or in ES5:

var addItem = function addItem(item) {
return {
type: ADD_ITEM,
item: item
};
};
